import AdminAuthLayout from '@/component/layouts/AdminAuthLayout';
import { ReactElement } from 'react';
import { HiOutlineUser } from 'react-icons/hi';
import { GrCart } from 'react-icons/gr';
import { FiPackage } from 'react-icons/fi';
import { MdReviews } from 'react-icons/md';
import Link from 'next/link';
import { BsFilePlus } from 'react-icons/bs';
import { FaChevronUp } from 'react-icons/fa';
import AdminPageTitle from '@/component/common/admin/AdminPageTitle';
import ThreadCard from '@/component/common/shared/ThreadCard';
import Head from 'next/head';
import { useFetchData } from '../../hooks/useApi';
import { TbListSearch } from 'react-icons/tb';
import { BiCommentDetail, BiDetail } from 'react-icons/bi';
import Spinner from '@/component/common/shared/Spinner';

const Dashboard = () => {
	const { data, isLoading } = useFetchData(
		'/api/dashboard/info',
		['admin-dashboard'],
		1,
	);
	const Info = [
		{
			title: 'Users',
			percent: 5,
			value: `${
				isLoading ? 0 : data.status === 'success' ? data.user : 0
			}`,
			linkLabel: 'See all users',
			link: '/admin/users',
			icon: HiOutlineUser,
			iconBg: 'bg-[#FCD5D7]',
			iconColor: 'text-[#944E54]',
		},
		{
			title: 'Threads',
			percent: 2,
			value: `${
				isLoading ? 0 : data.status === 'success' ? data.threads : 0
			}`,
			linkLabel: 'See all threads',
			link: '/admin/threads',
			icon: BiDetail,
			iconBg: 'bg-[#F9F0D5]',
			iconColor: 'text-[#CBAC63]',
		},
		{
			title: 'Replies',
			percent: 7,
			value: `${
				isLoading ? 0 : data.status === 'success' ? data.replies : 0
			}`,
			linkLabel: 'See all replies',
			link: '/admin/replies',
			icon: BiCommentDetail,
			iconBg: 'bg-[#C3E9C0]',
			iconColor: 'text-[#3B7933]',
		},
		{
			title: 'Categories',
			percent: 1,
			value: `${
				isLoading ? 0 : data.status === 'success' ? data.category : 0
			}`,
			linkLabel: 'See all categories',
			link: '/admin/categories',
			icon: TbListSearch,
			iconBg: 'bg-[#E9CCE7]',
			iconColor: 'text-[#8C4293]',
		},
	];
	return (
		<>
			<Head>
				<title>Welcome My Forum Dashboard</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
				<meta
					name="viewport"
					content="width=device-width, initial-scale=1"
				/>
				<link rel="icon" href="/favicon.ico" />
			</Head>
			{isLoading ? (
				<Spinner />
			) : (
				<section id="dashboard">
					<div className="admin-dashboard">
						<div className="pb-8">
							<AdminPageTitle
								title={'Admin'}
								subtitle={'Admin'}
							/>
						</div>
						<div className="grid grid-cols-4 gap-6">
							{Info.map((item, index) => (
								<div
									className="single-box bg-white p-4 rounded-md"
									key={index}
								>
									<div className="flex items-center justify-between">
										<h5 className="text-[#C0C0C0] uppercase text-base font-semibold">
											{item.title}
										</h5>
										<div className="flex items-center text-[#29692C] gap-2">
											<FaChevronUp className="text-base font-bold" />
											<span className="text-base font-bold flex items-center">
												<BsFilePlus />
												{item.percent}%
											</span>
										</div>
									</div>
									<h3 className="text-black text-4xl font-normal py-4">
										{item.value}
									</h3>
									<div className="flex items-center justify-between">
										<Link
											href={item.link}
											className="text-sm text-black font-medium underline"
										>
											{item.linkLabel}
										</Link>
										<span
											className={`h-8 w-8 rounded-md flex items-center justify-center ${item.iconBg}`}
										>
											<item.icon
												className={`text-lg ${item.iconColor}`}
											/>
										</span>
									</div>
								</div>
							))}
						</div>
						{data.status === 'success' &&
							data.mostView.length > 0 && (
								<div className="new-threads pt-10">
									<h3 className="text-base text-[#182730] font-semibold">
										Most Views Threads
									</h3>
									<div className="thread-wrapper mt-5">
										<div className="thread-list-header grid grid-cols-9 px-6 py-5 bg-white">
											<h5 className="col-span-4 text-[#303344] font-medium text-sm">
												Topic
											</h5>
											<h5 className="text-[#303344] font-medium text-sm text-center">
												Category
											</h5>
											<h5 className="text-[#303344] font-medium text-sm text-center">
												Likes
											</h5>
											<h5 className="text-[#303344] font-medium text-sm text-center">
												Replies
											</h5>
											<h5 className="text-[#303344] font-medium text-sm text-center">
												Views
											</h5>
											<h5 className="text-[#303344] font-medium text-sm text-center">
												Activity
											</h5>
										</div>
										<div className="thread-list pb-10">
											{data.mostView.map(
												(
													item: {
														author: {
															userName: string;
														};
														category: {
															title: string;
															background: string;
														};
														comments: string[];
														slug: string;
														tags: string[];
														title: string;
														topic: string;
														views: string[];
														_id: '63ec8cdc5e681047a1c58c03';
													},
													index: number,
												) => (
													<ThreadCard
														key={index}
														id={item._id}
														title={item.title}
														category={
															item.category.title
														}
														categoryBG={
															item.category
																.background
														}
														likes={2}
														replies={
															item.comments
																? item.comments
																		.length
																: 0
														}
														views={
															item.views
																? item.views
																		.length
																: 0
														}
														activity={'1d'}
														author={
															item.author.userName
														}
														slug={item.slug}
														action={false}
													/>
												),
											)}
										</div>
									</div>
								</div>
							)}
					</div>
				</section>
			)}
		</>
	);
};
Dashboard.getLayout = function getLayout(page: ReactElement) {
	return <AdminAuthLayout>{page}</AdminAuthLayout>;
};
export default Dashboard;
