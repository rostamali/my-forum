import Loader from '@/component/common/shared/Loader';
import NotFound from '@/component/common/shared/NotFound';
import SearchField from '@/component/common/shared/SearchField';
import ThreadCard from '@/component/common/shared/ThreadCard';
import UserAuthLayout from '@/component/layouts/UserAuthLayout';
import { useFetchData } from '@/hooks/useApi';
import { NextPageContext } from 'next';
import Head from 'next/head';
import { ReactElement } from 'react';

const SingleThreadCategory = ({ slug }: { slug: string }) => {
	const { data: threads, isLoading } = useFetchData(
		`/api/category/single/${slug}?select=background,description,title,threads,tags`,
		[slug],
		1,
	);
	return (
		<>
			<Head>
				<title>Political threads</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
				<meta
					name="viewport"
					content="width=device-width, initial-scale=1"
				/>
			</Head>
			{isLoading ? (
				<Loader />
			) : threads.status === 'success' ? (
				threads.data ? (
					<section
						id="single-categories-thread"
						className="bg-[#F8F9FA]"
					>
						<div className="container mx-auto">
							<div className="single-categories-thread__header py-12">
								<div className="flex md:items-center md:justify-between md:gap-4 md:flex-row flex-col md:mb-0 mb-3">
									<div className="flex flex-col items-start justify-center">
										<span
											className="text-white text-sm font-normal rounded-[4px] py-1 px-2"
											style={{
												backgroundColor:
													threads.data.background,
											}}
										>
											{threads.data.title}
										</span>
										<p className="text-[#666f74] text-base font-medium my-5 block">
											{threads.data.description}
										</p>
									</div>
									<div className="flex md:items-start md:gap-5 gap-3 lg:flex-row lg:items-center flex-col">
										<span className="text-[#182730] text-sm font-medium">
											Threads -{' '}
											{threads.data.threads
												? threads.data.threads.length
												: 0}
										</span>
										<SearchField />
									</div>
								</div>
								<div className="categories-tags border-b border-b-[#e1e7e9]">
									{threads.data.tags.length > 0 && (
										<>
											<h5 className="text-[#182730] text-sm font-bold mb-2">
												Similar TAGS
											</h5>
											<div className="tags flex items-center gap-2 flex-wrap mb-6">
												{threads.data.tags.map(
													(
														item: string,
														index: number,
													) => (
														<span
															key={index}
															className="bg-[#D7DADC] text-[#182730] text-sm font-normal py-1 px-[6px] rounded-[4px]"
														>
															{item}
														</span>
													),
												)}
											</div>
										</>
									)}
								</div>
							</div>
							{threads.data.threads.length > 0 ? (
								<div className="thread-wrapper">
									<div className="thread-list-header md:grid grid-cols-9 px-6 py-5 bg-white hidden">
										<h5 className="col-span-4 text-[#303344] font-medium text-sm">
											Topic
										</h5>
										<h5 className="text-[#303344] font-medium text-sm text-center">
											Category
										</h5>
										<h5 className="text-[#303344] font-medium text-sm text-center">
											Likes
										</h5>
										<h5 className="text-[#303344] font-medium text-sm text-center">
											Replies
										</h5>
										<h5 className="text-[#303344] font-medium text-sm text-center">
											Views
										</h5>
										<h5 className="text-[#303344] font-medium text-sm text-center">
											Activity
										</h5>
									</div>
									<div className="thread-list pb-10">
										{threads.data.threads.map(
											(
												item: {
													_id: string;
													title: string;
													slug: string;
													author: {
														userName: string;
													};
													comments: string[];
													upVote: string[];
													views: string[];
												},
												index: number,
											) => (
												<ThreadCard
													id={item._id}
													action={false}
													key={index}
													title={item.title}
													category={
														threads.data.title
													}
													categoryBG={
														threads.data.background
													}
													likes={
														item.upVote
															? item.upVote.length
															: 0
													}
													slug={item.slug}
													replies={
														item.comments
															? item.comments
																	.length
															: 0
													}
													views={
														item.views
															? item.views.length
															: 0
													}
													activity={'32'}
													author={
														item.author
															? item.author
																	.userName
															: ''
													}
												/>
											),
										)}
									</div>
								</div>
							) : (
								<div className="pb-20 pt-10">
									<h2 className="text-black text-xl font-medium">
										No thread found
									</h2>
								</div>
							)}
						</div>
					</section>
				) : (
					<NotFound text={'not found'} />
				)
			) : (
				<NotFound text={'not found'} />
			)}
		</>
	);
};

SingleThreadCategory.getInitialProps = async (ctx: NextPageContext) => {
	const { slug } = ctx.query;
	return { slug };
};
SingleThreadCategory.getLayout = function getLayout(page: ReactElement) {
	return <UserAuthLayout>{page}</UserAuthLayout>;
};
export default SingleThreadCategory;
