import { IoMdThumbsUp, IoMdThumbsDown } from 'react-icons/io';
import { FaHeart } from 'react-icons/fa';
import { HiClock, HiShare, HiUser } from 'react-icons/hi';
import { AiFillEye } from 'react-icons/ai';
import Link from 'next/link';
import { useCreateData, useFetchData } from '@/hooks/useApi';
import { NextPageContext } from 'next';
import Head from 'next/head';
import UserAuthLayout from '@/component/layouts/UserAuthLayout';
import { ReactElement, useState } from 'react';
import { useUpdateData } from '../../hooks/useApi';
import TextEditor from '@/component/common/shared/TextEditor';
import { useForm } from 'react-hook-form';
import { toast } from 'react-toastify';
import Loader from '@/component/common/shared/Loader';
import NotFound from '@/component/common/shared/NotFound';

const SingleThread = ({ slug }: { slug: string }) => {
	const { data: thread, isLoading } = useFetchData(
		`/api/thread/single/${slug}`,
		[slug],
		1,
	);
	const { mutate: threadAction, isLoading: idUpVoting } = useUpdateData([
		slug,
	]);
	const handleUpVote = () => {
		threadAction({
			url: '/api/thread/upvote',
			body: {
				id: thread.data._id,
			},
		});
	};
	const handleDownVote = () => {
		threadAction({
			url: '/api/thread/downvote',
			body: {
				id: thread.data._id,
			},
		});
	};
	const handleLoveVote = () => {
		threadAction({
			url: '/api/thread/lovevote',
			body: {
				id: thread.data._id,
			},
		});
	};
	const handleCommentUpVote = (id: string) => {
		threadAction({
			url: '/api/comment/upvote',
			body: {
				id,
			},
		});
	};
	const handleCommentDownVote = (id: string) => {
		threadAction({
			url: '/api/comment/downvote',
			body: {
				id,
			},
		});
	};
	const handleCommentLoveVote = (id: string) => {
		threadAction({
			url: '/api/comment/lovevote',
			body: {
				id,
			},
		});
	};
	const { mutate: createComment, isLoading: isCommentCreating } =
		useCreateData('/api/thread/comment/create', slug);
	const { handleSubmit, reset, register } = useForm();
	const [description, setDescription] = useState<string>();
	const onSubmit = (data: any) => {
		data.description = description;
		data.threadId = thread.data._id;
		if (data.description.length < 20) return toast.error('Text is short');
		createComment(data);
		reset();
		setDescription(' ');
	};

	return (
		<>
			<Head>
				<title>
					{isLoading
						? 'Single thread'
						: thread.status === 'success'
						? thread.data
							? thread.data.title
							: 'Single thread'
						: 'Single thread'}
				</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
				<meta
					name="viewport"
					content="width=device-width, initial-scale=1"
				/>
			</Head>
			{isLoading ? (
				<Loader />
			) : thread.status === 'success' ? (
				thread.data ? (
					<section id="single-thread" className="bg-[#F8F9FA] py-14">
						<div className="container mx-auto">
							<div className="thread-details flex gap-10 bg-[#fff] md:p-10 md:flex-row flex-col p-6">
								<div className="user md:block hidden">
									<Link
										href="/"
										className="bg-[#73D2DE] h-[45px] w-[45px] flex items-center justify-center text-xl font-normal text-white rounded-full"
									>
										{thread.data.author &&
											thread.data.author.userName.substring(
												0,
												1,
											)}
									</Link>
								</div>
								<div className="thread-content">
									<div className="flex items-center justify-between gap-3 mb-5">
										<div className="flex items-center gap-2">
											<Link
												href="/"
												className="bg-[#73D2DE] h-[40px] w-[40px] md:hidden items-center justify-center text-xl font-normal text-white rounded-full flex"
											>
												{thread.data.author &&
													thread.data.author.userName.substring(
														0,
														1,
													)}
											</Link>
											<span className="text-[#666f74] text-sm font-medium">
												{thread.data.author.userName}
											</span>
										</div>
										<p className="flex items-center gap-2">
											<HiClock className="text-[#666f74] text-lg" />
											<span className="text-[#666f74] text-sm font-medium">
												{new Date(
													thread.data.dateCreated,
												).toLocaleString('en-US', {
													timeZone: 'UTC',
													year: '2-digit',
													month: 'short',
													day: 'numeric',
												})}
											</span>
										</p>
									</div>
									<h3 className="thread-title text-[#303344] text-lg font-medium">
										{thread.data.title}
									</h3>

									{thread.data.tags.length > 0 && (
										<div className="thread-tags flex items-center flex-wrap gap-3 my-5">
											{thread.data.tags.map(
												(
													item: string,
													index: number,
												) => (
													<span
														className="thread-tag"
														key={index}
													>
														{item}
													</span>
												),
											)}
										</div>
									)}
									<span className="thread-border border-b border-b-[#666f7419] block mb-5"></span>
									<div
										className="thread-description"
										dangerouslySetInnerHTML={{
											__html: thread.data.description
												? thread.data.description.replace(
														/<p>(\s|&nbsp;)*<\/p>/g,
														'&nbsp;',
												  )
												: '',
										}}
									></div>
									<div className="thread-action flex items-center justify-between pt-10">
										<div className="flex items-center md:gap-8 gap-3">
											<button
												className="group flex items-center gap-3"
												onClick={handleUpVote}
												disabled={thread.upVote}
											>
												<IoMdThumbsUp
													className={`text-2xl ${
														thread.upVote
															? 'text-[#2171CD]'
															: 'text-[#656F73] group-hover:text-[#2171CD]'
													}`}
												/>
												<span className="group-hover:text-[#2171CD] text-[#656F73] text-base font-medium">
													{thread.data.upVote
														? thread.data.upVote
																.length
														: 0}
												</span>
											</button>
											<button
												className="group flex items-center gap-3"
												disabled={thread.downVote}
												onClick={handleDownVote}
											>
												<IoMdThumbsDown
													className={`text-2xl ${
														thread.downVote
															? 'text-[#2171CD]'
															: 'text-[#656F73] group-hover:text-[#2171CD]'
													}`}
												/>
												<span className="group-hover:text-[#2171CD] text-[#656F73] text-base font-medium">
													{thread.data.downVote
														? thread.data.downVote
																.length
														: 0}
												</span>
											</button>
											<button
												className="group flex items-center gap-3"
												onClick={handleLoveVote}
												disabled={thread.loveVote}
											>
												<FaHeart
													className={`group-hover:text-[#2171CD] text-xl ${
														thread.loveVote
															? 'text-[#2171CD]'
															: 'text-[#656F73]'
													}`}
												/>
												<span className="group-hover:text-[#2171CD] text-[#656F73] text-base font-medium">
													{thread.data.loveVote
														? thread.data.loveVote
																.length
														: 0}
												</span>
											</button>
										</div>
										<button className="group">
											<HiShare className="text-[#656F73] group-hover:text-[#2171CD] text-2xl" />
										</button>
									</div>
								</div>
							</div>
							<div className="thread-info bg-[#fff] p-10 mt-10">
								<h4 className="text-[#303344] text-base font-medium">
									Thread Status
								</h4>
								<div className="thread-stat-info">
									<ul className="flex items-center gap-14 pt-4">
										<li className="flex flex-col items-center justify-center gap-1">
											<AiFillEye className="text-[#666f74] text-2xl" />
											<span className="text-[#303344] text-base font-medium">
												{thread.views}
											</span>
										</li>
										<li className="flex flex-col items-center justify-center gap-1">
											<HiUser className="text-[#666f74] text-2xl" />
											<span className="text-[#303344] text-base font-medium">
												10.5k
											</span>
										</li>
										<li className="flex flex-col items-center justify-center gap-1">
											<FaHeart className="text-[#666f74] text-xl" />
											<span className="text-[#303344] text-base font-medium">
												10.5k
											</span>
										</li>
										<li className="flex flex-col items-center justify-center gap-1">
											<HiUser className="text-[#666f74] text-2xl" />
											<span className="text-[#303344] text-base font-medium">
												{thread.subscriber}
											</span>
										</li>
									</ul>
								</div>
							</div>
							<div className="thread-replay-wrapper mt-10">
								{/* replay 1 */}
								{thread.data.comments.length > 0 &&
									thread.data.comments.map(
										(
											item: {
												dateCreated: Date;
												text: string;
												_id: string;
												user: {
													_id: string;
													userName: string;
												};
												downVote: string[];
												upVote: string[];
												loveVote: string[];
											},
											index: number,
										) => (
											<div
												className="thread-replay flex gap-10 bg-[#fff] md:p-10 p-6 mb-6"
												key={index}
											>
												<div className="user md:block hidden">
													<Link
														href="/"
														className="bg-[#73D2DE] h-[45px] w-[45px] flex items-center justify-center text-xl font-normal text-white rounded-full"
													>
														{item.user.userName.substring(
															0,
															1,
														)}
													</Link>
												</div>
												<div className="thread-replay__content flex-1">
													<div className="flex items-center justify-between mb-5">
														<div className="flex items-center gap-2">
															<Link
																href="/"
																className="bg-[#73D2DE] h-[40px] w-[40px] md:hidden items-center justify-center text-xl font-normal text-white rounded-full flex"
															>
																{item.user.userName.substring(
																	0,
																	1,
																)}
															</Link>
															<span className="text-[#666f74] text-sm font-medium">
																{
																	item.user
																		.userName
																}
															</span>
														</div>
														<p className="flex items-center gap-2">
															<HiClock className="text-[#666f74] text-lg" />
															<span className="text-[#666f74] text-sm font-medium">
																{new Date(
																	item.dateCreated,
																).toLocaleString(
																	'en-US',
																	{
																		timeZone:
																			'UTC',
																		year: '2-digit',
																		month: 'short',
																		day: 'numeric',
																	},
																)}
															</span>
														</p>
													</div>
													<div className="thread-replay__description">
														<p
															className="text-[#666F74] text-[15px]"
															dangerouslySetInnerHTML={{
																__html: item.text
																	? item.text.replace(
																			/<p>(\s|&nbsp;)*<\/p>/g,
																			'&nbsp;',
																	  )
																	: '',
															}}
														></p>
													</div>
													<div className="thread-replay__action flex items-center justify-between pt-10">
														<div className="flex items-center md:gap-8 gap-3">
															<button
																className="group flex items-center gap-3"
																onClick={() =>
																	handleCommentUpVote(
																		item._id,
																	)
																}
															>
																<IoMdThumbsUp className="text-[#656F73] group-hover:text-[#2171CD] text-2xl" />
																<span className="group-hover:text-[#2171CD] text-[#656F73] text-base font-medium">
																	{item.upVote
																		? item
																				.upVote
																				.length
																		: 0}
																</span>
															</button>
															<button
																className="group flex items-center gap-3"
																onClick={() =>
																	handleCommentDownVote(
																		item._id,
																	)
																}
															>
																<IoMdThumbsDown className="text-[#656F73] group-hover:text-[#2171CD] text-2xl" />
																<span className="group-hover:text-[#2171CD] text-[#656F73] text-base font-medium">
																	{item.downVote
																		? item
																				.downVote
																				.length
																		: 0}
																</span>
															</button>
															<button
																className="group flex items-center gap-3"
																onClick={() =>
																	handleCommentLoveVote(
																		item._id,
																	)
																}
															>
																<FaHeart className="text-[#656F73] group-hover:text-[#2171CD] text-xl" />
																<span className="group-hover:text-[#2171CD] text-[#656F73] text-base font-medium">
																	{item.loveVote
																		? item
																				.loveVote
																				.length
																		: 0}
																</span>
															</button>
														</div>
														<button className="group">
															<HiShare className="text-[#656F73] group-hover:text-[#2171CD] text-2xl" />
														</button>
													</div>
												</div>
											</div>
										),
									)}
							</div>
							<div className="thread-replay mt-10">
								<form onSubmit={handleSubmit(onSubmit)}>
									<span className="input__label pb-5 block">
										Post Your Replay
									</span>
									<TextEditor
										defaultVal={undefined}
										handler={setDescription}
									/>
									<div className="flex md:items-center gap-4 justify-between sm:flex-row flex-col mt-6">
										<label
											htmlFor="subscribe"
											className="text-base text-[#666f74] font-medium flex items-center gap-4 cursor-pointer"
										>
											<input
												type="checkbox"
												id="subscribe"
												className="bg-[#666f74] h-6 w-6 ring-0 focus:ring-0"
												{...register('subscribe')}
											/>
											<span>Subscribe to this topic</span>
										</label>
										<button className="bg-[#2171cd] text-white font-medium text-base rounded py-[12px] px-8">
											Replay
										</button>
									</div>
								</form>
							</div>
						</div>
					</section>
				) : (
					<NotFound text="Not Found" />
				)
			) : (
				<NotFound text="Not Found" />
			)}
		</>
	);
};

SingleThread.getInitialProps = async (ctx: NextPageContext) => {
	const { slug } = ctx.query;
	return { slug };
};
SingleThread.getLayout = function getLayout(page: ReactElement) {
	return <UserAuthLayout>{page}</UserAuthLayout>;
};
export default SingleThread;
